<SQL> Structured Query Language (구조적인 질의어)
종류) 암기사항

1. 데이터 정의어(DDL): Data Definition Language
    - 데이터베이스 관리자나 응용프로그래머가 데이터베이스의 논리적인 구조를 정의하기 위한 언어.
    - 객체(예:table,view, trigger)에 대한 정의
    - 명령어: CREATE, DROP, ALTER, RENAME, TRUNCATE 
    
2. 데이터 조작어(DML): Data Manipulation Language  ★
    - 데이터베이스에 저장된 데이터를 조작(추가,삭제,수정)하기 위해 사용하는 언어
    - 명령어: INSERT, DELETE, UPDATE, SELECT

※INSERT
==>   insert into 테이블명  [(컬럼명1, 컬럼명2)]  values  (데이터1, 데이터2) ;
==>   insert into 테이블명  [(컬럼명1, 컬럼명2)]  values  (데이터1, 데이터2),(데이터1, 데이터2) ;
         
※DELETE
==>   delete from 테이블명
         [ where  조건식  ];

※UPDATE
==>   update  테이블명  set  컬럼명1=변경데이터1, 컬럼명2=변경데이터2
         [ where  조건식  ];          

    
3. 데이터 제어어(DCL): Data Control Language
    - 데이터베이스에 대한 접근 권한 부여등의 데이터베이스 시스템의 관리를 위한 목적으로 사용되는 언어
    - 명령어: GRANT(권한 부여), REVOKE(권한 회수)
    
4. 데이터 질의어(DQL): Data Query Language  ★
    - 검색,조회 명령어
    - 명령어: SELECT
    
5. 트랜잭션 제어어(TCL): Transaction Control Language
    - 논리적인 (DML)작업단위의 묶음
    - 명령어: COMMIT, ROLLBACK, SAVEPOINT





<테이블에 저장된 데이터에 대한 검색(조회)>
===> select명령문 사용

형식)
  SELECT (조회하고 싶은)컬럼명
  FROM   (컬럼이 속한)테이블명;



<테이블내의 데이터를 검색>
 형식)
    SELECT 컬럼명1, 컬럼명2
    FROM  (검색하고자 하는 컬럼명이 속한)테이블명;

   select empno,ename, dname
   from       emp       ,   dept;  ----> 두개이상의 테이블 조회: JOIN








--------------------------------------------
<사원테이블구성> - EMP
 EMPNO    (사원번호)
 ENAME    (사원명)  
 JOB         (직책)    
 MGR        (매니저,직속상사)
 HIREDATE (고용일,입사일)  
 SAL         (급여)         
 COMM     (커미션,특별수당,성과급여)
 DEPTNO   (사원이 속한 부서번호)          
      
<부서테이블구성> - DEPT
 DEPTNO   (부서번호) 
 DNAME    (부서명)   
 LOC         (부서위치)    
           
<급여 등급 테이블구성> - SALGRADE
 GRADE     (등급 1~5)
 LOSAL      (최소급여)
 HISAL       (최대급여)
--------------------------------------------
문제1) 급여등급, 최소급여, 최대급여를 검색(조회)하시오.
select grade, losal, hisal
from salgrade;

문제2) 부서명과 부서위치를 출력하시오.


문제3) 사원번호, 사원명, 입사일, 급여를 조회(출력)하시오.



문제4) "안녕, SQL~!!"을 화면에 출력하시오.


※ MySQL은 문자, 문자열 데이터를 표현할 때 작은 따옴표, 큰 따옴표를 사용.
  (작은 따옴표 권장!!)

<별칭(alias) 사용하기>
형식)
    SELECT 컬럼명 [AS] 별명
    FROM   테이블명;

문제5) 화면에 사원번호와 사원명을 출력하시오.
    (컬럼명 : empno--->사원번호,     ename---> 사원명 으로 이름변경해서 출력)



문제6) 각 사원들의 사원번호, 사원명, 급여, 연봉을 출력하시오. (연봉 계산은 *12)


문제7) 사원들의 이름과 직책을 출력하시오.
       (출력변경 ==> SMITH사원의 직책은 CLERK입니다.)


문제8) 사원들이 갖는 직책을 출력하시오.
      (중복된 직책은 제거해서 출력)  : 직책의 종류



<DISTINCT 키워드> : 중복제거 기능
  형식)
    SELECT DISTINCT (중복이 예상되는)컬럼명
    FROM   테이블명;

   ----> 사원들이 갖는 직책의 종류를 출력하시오.
    select distinct job
    from emp;

문제9) 10과 3의 사칙연산의 결과를 출력하는 SQL문을 작성하시오. ==> +-*/



==================================================================
<WHERE절> - 조건절, 출력행을 제어하는 역할

  형식)
    SELECT 컬럼명                               ---------> 전체 열중 원하는 열만 선택   : 열을 제어
    FROM   테이블명
    WHERE  조건식(conditions);    ---------> 전체 행중 원하는 행만 선택   : 행을 제어 
                                 ---------> 전체 행중 '조건식'에 일치하는 행만 선택
    ※ 조건식 구성
  ====>   기준컬럼명         연산자        비교데이터                           
                                      --------
                                   (비교연산자)
                                  > , < , >= , <=
                                      = (같다, 등가연산자)               ename = 'ADAMS'
                                !=(다르다),  <> 



문제1) 20번 부서에 근무하는 사원의 사원번호, 사원명, 직책, 급여를 출력하시오.
select empno, ename, job, sal
from emp
where deptno = 20;
 

문제2) 직책이 MANAGER인 사원의 사원번호, 사원명, 직책, 입사일을 출력하시오.


문제3) 급여가 2000 이상인 사원의 사원번호, 사원명, 급여를 출력하시오.

문제4) FORD사원의 사원번호, 사원명, 부서번호를 출력하시오.



문제5) 1981년 6월 1일 이후에 입사한 사원의 사원번호, 사원명, 부서번호, 입사일을 출력하시오.


문제6) 10번 부서에 근무하는 사원의 사원번호, 사원명, 매니저의 사원번호를 출력하시오.



문제7) 20번과 30번 부서에 근무하는 사원의 사원번호, 사원명, 매니저의 사원번호를 출력하시오. 


문제8) 10,20번 부서의 부서번호, 부서명, 부서위치를 조회하시오.



문제9) 3등급 급여의 최소급여와 최대급여를 출력하시오.




====================================================================
<조건식의 구성>
    컬럼명         연산자       비교데이터

<LIKE연산자>
   형식)     컬럼명   LIKE  'pattern'
         ----> 패턴과 닮은 컬럼이 속한 행을 조회
         ----> 패턴내의 예약문자(횟수를 표현하는 문자)
                        %   : 0~n개의 문자를 대체
                        _   : 단 1개의 문자를 대체

  DB에 저장된 문자데이터 예) 'a',  'ab', 'ad', 'abc',  'abbbbb',  'bababa'
  
  like 'a'   ----->   'a'         : % 또는 _ 문자를 사용하지 않는다면 등호와 같은 결과!! 
    =  'a'
    
  like 'a%'  ----->  a문자로 시작하는 데이터!!        ==> startsWith 
             ----->  'a',  'ab', 'ad', 'abc',  'abbbbb'
             
  like 'a__' -----> 'abc'
  
  like '%a'  ----->  a문자로 끝나는 데이터!!            ==> endsWith
             ----->  'a', 'bababa'
  
  like '__c' -----> 'abc'
  
  like '%a%' -----> a문자를 포함하는 데이터!!           ==> contains
             -----> 'a',  'ab', 'ad', 'abc',  'abbbbb',  'bababa'



문제) 사원명이 'A'로 시작되는 사원의 정보(사원번호,사원명,급여)를 출력하시오


문제) 사원명이 'S'로 끝나는 사원의 정보(사원번호,사원명,급여)를 출력하시오



문제) 사원명에 'A'문자가 포함된 사원의 정보(사원번호,사원명,급여)를 출력하시오   




문제) 사원명의 세번째 문자에 'A'문자가 포함된 사원의 정보(사원번호,사원명,급여)를 출력하시오



문제) 사원명에 '%'문자가 포함된 사원의 정보(사원번호,사원명,급여)를 출력하시오
  ==> 테스트를 위해 잠시 '%'포함된 사원정보 입력!!
       ==> insert into emp   (empno, ename,   sal)
                     values  (8000, '홍%길동' , 2500); 
                                       '%김주원'
                                       '나주원%'

   
<IN 연산자>
  형식)  컬럼명    IN  (value_list)
       ----> 컬럼의 값이 value_list에 데이터와 하나라도 일치한다면!!
             (OR연산자 유사)
             
문제) 커미션을 300, 500, 1400 받는 사원의 정보(사원번호, 사원명, 부서번호, 커미션)를 출력하시오.



<BETWEEN AND 연산자>  : 범위 조건시 사용
  형식)    컬럼명   BETWEEN  a AND b    ===> a:최소값, b:최대값  ==> a이상 ~ b이하
                컬럼명    BETWEEN  최소값 AND 최대값
                
                between 1 and 100  ==> 1이상  100이하
                
  ※주의 ) BETWEEN AND 연산자는 초과와 미만은 표현을 못함!!                         

문제) 급여가 1600 이상이고 3000 이하인 사원의 정보(사원번호, 사원명, 급여)를 출력하시오.




문제) 커미션을 받는 사원의 사원번호, 사원명, 부서번호, 커미션을 출력하시오.



문제) 커미션을 받을 조건이 되는 사원의 사원번호, 사원명, 부서번호, 커미션을 출력하시오.



문제) 커미션을 받지 않는 사원의 사원번호, 사원명, 부서번호, 커미션을 출력하시오.


문제) 커미션을 받지 않는(커미션이 null인, 커미션을 받지않은 조건) 
        사원의 사원번호, 사원명, 부서번호, 커미션을 출력하시오.

   
★★   데이터 값이 null인 것을 체크(비교)     :  컬럼명  IS NULL
            null이 아닌것을 체크(비교)  :  컬럼명  IS NOT NULL




문제) 커미션을 받을 조건이 되는 
          사원의 사원번호, 사원명, 부서번호, 커미션을 출력하시오.

  

<NULL데이터> ★
- 미확정 데이터 (같은 행에서 입력되지 않은 데이터)
- 연산, 할당, 비교가 불가능!! (결과행에서 배제)
            ----
            comm=null
  ---
  3000+null ==> null            
  
문제) 전체사원의 사원번호, 사원명, 급여, 연봉(comm포함)을 출력하시오.
     ==> 연봉 : sal+comm



문제) 사원들의 사원번호, 사원명, 커미션을 출력하되
   커미션을 받지않는(커미션의 값이 null) 사원들은 0으로 출력하시오.



문제) 사원들의 사원번호, 사원명, 커미션을 출력하되
   커미션을 받지않는(커미션의 값이 null) 사원들은 '없음'으로 출력하시오.



문제) 10번 부서에 근무하는 사원들의 사원번호, 사원명, 직책, 매니저(상사)를 출력하시오.
     (단, 매니저가 없는 경우 'CEO'를 출력하시오.)




================================================================================
<ORDER BY절>
- 정렬하여 출력

형식)
   select 컬럼명
   from   테이블명
   where  조건식
   ORDER BY (정렬하고자 하는)컬럼명 [ASC|DESC];
   
   ---> ASC (ascending)  : 오름차순 정렬(기본값!!)   abcde  012345  가나다라
   ---> DESC(descending) : 내림차순 정렬                     edcba  543210  라다나가


문제) 30번 부서에 근무하는 사원의 사원번호, 사원명, 급여를 출력하되
         사원번호에 대해 내림차순으로 정렬하시오.


문제) 30번 부서에 근무하는 사원의 사원번호, 사원명, 급여를 출력하되
         사원명에 대해 오름차순으로 정렬하시오.



문제) 30번 부서에 근무하는 사원의 사원번호, 사원명, 급여를 출력하되
         급여를 많이 받는 순으로 출력하시오.


문제) 가장 최근에 입사한 사원부터 사원번호, 사원명, 급여, 입사일을 출력하시오.                  



문제) 급여가 많은 순으로 사원번호, 사원명, 급여를 출력하시오.
     (단, 급여가 같을 경우 사원명을 기준으로 오름차순 출력하시오.)
     ===> ORDER BY 1차정렬 컬럼명 , 2차정렬 컬럼명



   select  [distinct] 컬럼명1 [as] 별명, 컬럼명2 "별명", 데이터, 산술연산, concat(컬럼명3 , 데이터)
   from 테이블명
   where 조건식
         -----
       (컬럼명     연산자    비교데이터)
               -----
                          비교연산자(<  >   <=    >=    =    !=    <>  )
               like   '패턴%_'
               in     (value_list)
        deptno  in    (10,20,30)
               between  최소값  and 최대값     :최소값이상 ~ 최대값이하
               
        comm     =    null    (X)
        comm    !=    null    (X)
        comm    is    null     (O)
        comm    is  not  null  (O) 
   order by 컬럼명 [ASC|DESC];
                          -----
                         기본값




<NOT연산자>
- 조건에 만족하지 못하는 행을 검색.
- 위치: 조건식 앞에 사용
       in, like, between 앞에 사용
       null앞에 사용
       
문제) 30번 부서에 근무하는 사원의 정보(사원번호,사원명,부서번호,직책)를 출력하시오.



문제) 30번 부서에 근무하지 않는 사원의 정보(사원번호,사원명,부서번호,직책)를 출력하시오.


문제) 이름에 'A'를 포함하지 않는 사원의 사원번호, 사원명, 부서번호를 출력하시오.
   


문제) 급여가 1600 이상이고 3000 이하인 사원의 사원번호, 사원명, 급여를 출력.



문제) 급여가 1600 미만 또는 3000 초과인 사원의 사원번호, 사원명, 급여를 출력.



==================================================================
<그룹함수> ★ 집계함수
- 전체데이터를 그룹별로 구분하여 통계적인 결과를 구하기 위해 사용.
- 결과값은 항상 단행!!
- 그룹함수와 단순컬럼은 함께 사용하는 것이 불가능!!
  (만약 그룹함수와 함께 사용하고자 하는 컬럼이 그룹으로 묶여질 수 있다면
   group by절과 함께 사용하는 것이 가능)
- NULL은 결과값에서 제외    

종류) 
    SUM(총합), AVG(평균), COUNT(행갯수), MIN(최소값), MAX(최대값)


형식)
    그룹함수명(컬럼명)
    
문제) 사원들의 전체 급여 총합을 구하시오.

     
문제) 사원들의 평균 급여를 구하시오.     





DQL형식)
   1. select 조회컬럼명
   2. from   테이블명
   3. where  (전체행에 대한)조건식
   4. group by (그룹을 묶을 수 있는 조건을 가진)컬럼명
   5. having  (그룹에 대한)조건식
   6. order by 정렬컬럼명;

 ★실행순서!!  :  2- 3- 4- 5- 1(조회)- 6  - 출력  
   
   select deptno, avg(sal)
   from  emp
   group by deptno;   -- 부서별로 그룹을 묶겠음!!
                      -- 그룹함수와 컬럼이 매핑할 근거 마련
                      
    DEPTNO   AVG(SAL)
---------- ----------
        30 1566.66667
        20       2175
        10 2916.66667
        
    ==> 부서별 평균 급여           

select deptno, avg(sal)
from  emp
group by deptno
order by 2 asc;


문제1) 사원들의 직급종류는 몇 개(=몇 행)인지 출력하시오.


문제2) 전체사원의 수(=전체 행의 갯수)를 구하시오.


문제3) 가장 오래 근무한 사원의 입사일을 구하시오.



문제4) 부서별 평균 급여를 구하시오.(부서번호가 작은 부서부터 출력)


문제5) 부서의 평균 급여가 2000 이상인 부서의 부서번호와 평균 급여를 출력하시오.
      ------------------------
         ==> 부서별 그룹에 대한 조건!!



문제6) 평균급여(==> 2073.21429)보다 더 많은 급여를 받은 
      ----------------------------------------
             전체(14명 사원)에 대한 조건!!
        사원의 사원번호, 사원명, 급여를 출력하시오.



   
문제7) 급여가 1000 이상인 사원들에 대해서만 부서별로 평균을 구하고

      이 중에 평균 급여가 2000 이상인 부서의 부서번호와 평균급여를 출력하시오.
      
 

##########################################################################

<SQL> Structured Query Language
1. DQL(데이터 조회,검색,출력)
   - select 
   
   DQL문법)
   
       1. select 컬럼명
       2. from   테이블명
       3. where  조건식
       4. group by 컬럼명
       5. having  조건식
       6. order by  컬럼명;
   
   실행순서) 2- 3- 4- 5- 1(DB로 부터의 조회,인출)- 6   - 1(정렬된 결과를 출력)
   
        select distinct 조회컬럼명1 [as] 별명,  concat(컬럼명2, 컬럼명3),  데이터, 산술연산, 
                           함수호출(예: length(ename)), 그룹함수호출(count(),sum(),max(),min(),avg())
                           
        from   테이블명
        where  조건식
               ---------
                         컬럼명       연산자       데이터
                     -------
                                      비교연산자(>  <   >=   <=  =   !=  <>)
                     like      '패턴%_'
                     in        (value_list)  
                       
                 예) deptno  in        (10,20,30)
              ==> deptno = 10  OR  deptno = 20  OR  deptno = 30      
             ename   in        ('ADAMS','MILLER')
              ==> ename = 'ADAMS'  OR  ename = 'MILLER'
                     
                     between  최소값 and 최대값
                예) sal >= 2000  and  sal<=3000                     
              sal    between  2000 and  3000           ==> 2000이상~ 3000이하
              sal    not between  2000 and  3000       ==> 2000미만, 3000초과
         not  sal    between  2000 and  3000           ==> 2000미만, 3000초과
              
                       =      null    (실행결과 없음)
                       is     null    (컬럼의 값이 null과 같다면)
                       is  not null    (컬럼의 값이 null과 같지않다면)
       <부정연산자>                                                        
        not 조건식
        not (조건식1 or 조건식2)
        not in
        not like
        not between 최소값 and 최대값                                                                         
               
        group by (그룹묶을수 있는)컬럼명
                    예)  group by  deptno
                 ===> (10번부서의 사원들)   (20번부서의 사원들) (30번부서의 사원들)
                          
        having  (그룹에 대한) 조건식
                ===> group by와 반드시 함께 사용!!
                ===> deptno = 10            : 3개의 그룹중 (10번부서의 사원들만)
                     avg(sal) >= 2000       : 10번,20번,30번 부서 각각의 평균 급여를 비교
                                             ---- ---- ----      
                                       (사원3명 급여 더하기/3)                                                  
                                           (사원5명 급여 더하기/5)     
                                                 (사원6명 급여 더하기/6)
        order by  (정렬할 )컬럼명  [ASC|DESC];
                               ----------
                                            생략하면 ASC(오름차순) 기본값
                                            
                                 컬럼명1, 컬럼명2
                  ------ -------
                  1차정렬    1차정렬결과에 대한 2차정렬